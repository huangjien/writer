name: CI/CD Pipeline

on:
  push:
    branches: ['*']
permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run tests
      run: pnpm test
      
    - name: Run doctor check
      run: ./doctor.sh

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Create temp directory
      run: mkdir -p ~/temp
      
    - name: Create native Android project and Build APK
      run: |
        # Create native Android project using Expo prebuild
        echo "Creating native Android project using Expo prebuild..."
        CI=1 npx expo prebuild --platform android --no-install
        
        # Install dependencies for the native project
        echo "Installing dependencies for native Android project..."
        pnpm install
        
        # Make Gradle wrapper executable
        if [ -f "android/gradlew" ]; then
          chmod +x android/gradlew
          echo "Made Gradle wrapper executable"
        fi
        
        # Build Android APK using Gradle
        echo "Building Android APK using Gradle..."
        ./buildAndroid.sh
        
        # Verify APK was created
        if [ -f "$HOME/temp/writer.apk" ]; then
          echo "APK build successful!"
          ls -la "$HOME/temp/writer.apk"
        else
          echo "Error: APK was not created"
          exit 1
        fi
      
    - name: Get package version
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
      
    - name: Upload APK to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a unique package name with version and timestamp
        PACKAGE_NAME="writer-apk"
        VERSION="${{ steps.package-version.outputs.version }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        APK_NAME="writer-v${VERSION}-${TIMESTAMP}.apk"
        
        # Check if APK exists and copy with version info
        if [ -f "$HOME/temp/writer.apk" ]; then
          cp "$HOME/temp/writer.apk" "$HOME/temp/${APK_NAME}"
          echo "APK found and renamed to ${APK_NAME}"
        else
          echo "Error: APK not found at $HOME/temp/writer.apk"
          echo "Listing contents of $HOME/temp:"
          ls -la "$HOME/temp/" || echo "temp directory does not exist"
          echo "Checking for APK in build output:"
          ls -la android/app/build/outputs/apk/release/ || echo "Build output directory not found"
          exit 1
        fi
        
        # Upload to GitHub Packages using GitHub CLI
        gh release create "v${VERSION}-${TIMESTAMP}" "$HOME/temp/${APK_NAME}" \
          --title "Writer APK v${VERSION}" \
          --notes "Automated APK build for Writer app version ${VERSION}" \
          --prerelease
    
    - name: Publish release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true
      run: pnpm run publishRelease